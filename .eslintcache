[{"D:\\Project\\social_network_ruslan\\src\\index.js":"1","D:\\Project\\social_network_ruslan\\src\\App.js":"2","D:\\Project\\social_network_ruslan\\src\\serviceWorker.js":"3","D:\\Project\\social_network_ruslan\\src\\components\\login.component.js":"4","D:\\Project\\social_network_ruslan\\src\\components\\signup.component.js":"5","D:\\Project\\social_network_ruslan\\src\\components\\dashboard.js":"6","D:\\Project\\social_network_ruslan\\src\\components\\users.js":"7","D:\\Project\\social_network_ruslan\\src\\PrivateRoute.js":"8"},{"size":432,"mtime":1606668287232,"results":"9","hashOfConfig":"10"},{"size":2460,"mtime":1606673332288,"results":"11","hashOfConfig":"10"},{"size":5086,"mtime":1603028848000,"results":"12","hashOfConfig":"10"},{"size":1721,"mtime":1605952278261,"results":"13","hashOfConfig":"10"},{"size":2246,"mtime":1604748287837,"results":"14","hashOfConfig":"10"},{"size":177,"mtime":1604608255282,"results":"15","hashOfConfig":"10"},{"size":14218,"mtime":1606387067676,"results":"16","hashOfConfig":"10"},{"size":336,"mtime":1606673379308,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gaqco5",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Project\\social_network_ruslan\\src\\index.js",[],"D:\\Project\\social_network_ruslan\\src\\App.js",[],"D:\\Project\\social_network_ruslan\\src\\serviceWorker.js",[],["37","38"],"D:\\Project\\social_network_ruslan\\src\\components\\login.component.js",[],["39","40"],"D:\\Project\\social_network_ruslan\\src\\components\\signup.component.js",[],"D:\\Project\\social_network_ruslan\\src\\components\\dashboard.js",[],"D:\\Project\\social_network_ruslan\\src\\components\\users.js",["41","42","43"],"import React, { Component } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  FormGroup,\n  ModalFooter,\n  Label,\n  Input,\n  ModalBody,\n  Table,\n  Button,\n} from \"reactstrap\";\nimport axios from \"axios\";\n\n\n\nexport default class Users extends Component {\n  state = {\n    isLoading: false,\n    isFriend: \"\",\n    users: [],\n    userFriend: [],\n    meId: \"\",\n    currentUser: {\n      name: \"\",\n      username: \"\",\n      email: \"\",\n      friends: [],\n    },\n    newUserData: {\n      name: \"\",\n      username: \"\",\n      email: \"\",\n    },\n    editUserData: {\n      name: \"\",\n      username: \"\",\n      email: \"\",\n    },\n    newUserModal: false,\n    editUserModal: false,\n  };\n  async UNSAFE_componentWillMount() {\n    this.getCurrentUser();\n    this._refreshList();\n  }\n\n  toggleNewUserModal() {\n    this.setState({\n      newUserModal: !this.state.newUserModal,\n    });\n  }\n\n  toggleEditUserModal() {\n    this.setState({\n      editUserModal: !this.state.editUserModal,\n    });\n  }\n\n  getCurrentUser() {\n    const data = {\n      accessToken: localStorage.getItem(\"accessToken\"),\n    };\n    axios.post(\"/users/getUser\", data).then((res) => {\n      this.setState({\n        currentUser: res.data.user,\n      });\n    });\n  }\n\n  addUser() {\n    axios.post(\"users\", this.state.newUserData).then((response) => {\n      let { users } = this.state;\n      users.push(response.data);\n\n      this.setState({\n        users,\n        newUserModal: false,\n        newUserData: {\n          name: \"\",\n          username: \"\",\n          email: \"\",\n        },\n      });\n    });\n  }\n  updateUser() {\n    let { name, username, email } = this.state.editUserData;\n\n    axios\n      .put(\"users/\" + this.state.editUserData._id, {\n        name,\n        username,\n        email,\n      })\n      .then((response) => {\n        console.log(response.data);\n        this._refreshList();\n        this.setState({\n          editUserModal: false,\n          editUserData: { name: \"\", email: \"\", username: \"\" },\n        });\n      });\n  }\n  editUser(id, name, email, username) {\n    this.setState({\n      editUserData: { id, name, email, username },\n      editUserModal: !this.state.editUserModal,\n    });\n  }\n  sendFriendRequest(id) {\n    const data = {\n      accessToken: localStorage.getItem(\"accessToken\"),\n      _id: id,\n    };\n    axios.post(\"/users/sendFriendRequest\", data).then((res) => {\n      if (res.data.status === \"success\") {\n        alert(res.data.message);\n        window.location.href = \"/users\";\n      } else {\n        this._refreshList();\n        alert(res.data.message);\n      }\n    });\n    // console.log(id);\n    // console.log(localStorage.getItem(\"accessToken\"));\n  }\n  acceptFriendRequest(id) {\n    const data = {\n      accessToken: localStorage.getItem(\"accessToken\"),\n      _id: id,\n    };\n    axios.post(\"/users/acceptFriendRequest\", data).then((res) => {\n      if (res.data.status === \"success\") {\n        alert(res.data.message);\n        window.location.href = \"/users\";\n      } else {\n        alert(res.data.message);\n        this._refreshList();\n      }\n    });\n  }\n\n  rejectFriendRequest(id) {\n    const data = {\n      accessToken: localStorage.getItem(\"accessToken\"),\n      _id: id,\n    };\n    axios.post(\"/users/unfriend\", data).then((res) => {\n      if (res.data.status === \"success\") {\n        alert(res.data.message);\n        window.location.href = \"/users\";\n      } else {\n        alert(res.data.message);\n        this._refreshList();\n      }\n    });\n  }\n\n  cancelFriendRequest(id) {\n    const data = {\n      accessToken: localStorage.getItem(\"accessToken\"),\n      _id: id,\n    };\n    console.log(data);\n    axios.post(\"/users/unfriend\", data).then((res) => {\n      if (res.data.status === \"success\") {\n        alert(res.data.message);\n        window.location.href = \"/users\";\n      } else {\n        alert(res.data.message);\n        this._refreshList();\n      }\n    });\n  }\n\n  _refreshList() {\n  \n    let { users } = this.state;\n    let { userFriend } = this.state;\n \n    const data = {\n      accessToken: localStorage.getItem(\"accessToken\"),\n    };\n    axios\n      .post(\"/users/\", data)\n      \n      .then((res) => {\n        if (res.data.status === \"success\") {\n          for (var a = 0; a < res.data.user.length; a++) {\n            var data = res.data.user[a];\n            if (this.state.currentUser._id === data._id) {\n              continue;\n            }\n            if (this.state.currentUser.friends.length === 0){\n              users.push(data);\n              continue;\n            }\n            \n            for (var b = 0; b < this.state.currentUser.friends.length; b++){\n              var tempData = this.state.currentUser.friends[b];\n              if (tempData._id === data._id){\n                userFriend.push(tempData)\n              } else {\n                users.push(data);\n                \n              }\n            }\n          }\n        } else {\n          alert(res.data.message);\n          window.location.href = \"/\";\n        }\n      })\n      .then(\n        setTimeout(() => {\n          this.setState({\n            isLoading: true,\n          });\n        }, 1200)\n      );\n  }\n\n  render() {\n    const { isLoading } = this.state;\n    if (!isLoading) {\n      return <div>Loading...</div>;\n    } else {\n      let users = this.state.users.map((user) => {\n        return (\n          <tr key={user._id}>\n            <td>{user.name}</td>\n            <td>{user.email}</td>\n            <td>{user.username}</td>\n\n            <td>\n              <Button\n                color=\"success\"\n                size=\"sm\"\n                onClick={this.sendFriendRequest.bind(this, user._id)}\n              >\n                Add friend\n              </Button>\n            </td>\n          </tr>\n        );\n      });\n      let friends = this.state.userFriend.map((friend) => {\n        if (friend.status === \"Accepted\") {\n          return (\n            <tr key={friend._id}>\n              <td>{friend.name}</td>\n              <td>{friend.status}</td>\n              <td>\n                <div>\n                    <Button\n                    color=\"danger\"\n                    size=\"sm\"\n                    // onClick={this.deleteFriend.bind(this, friend._id)}\n                  >\n                    Delete friends\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          );\n        }\n      });\n      let friendsOutgoing = this.state.userFriend.map((friend) => {\n        if (friend.sentByMe === true && friend.status === \"Pending\") {\n          return (\n            <tr key={friend._id}>\n              <td>{friend.name}</td>\n              <td>{friend.status}</td>\n              <td>\n                <div>\n                    <Button\n                    color=\"danger\"\n                    size=\"sm\"\n                    \n                    onClick={this.cancelFriendRequest.bind(this, friend._id)}\n                  >\n                    Cancel request\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          );\n        }\n      });\n      let friendsIncoming = this.state.userFriend.map((friend) => {\n        if (friend.sentByMe === false && friend.status === \"Pending\") {\n          return (\n            <tr key={friend._id}>\n              <td>{friend.name}</td>\n              <td>\n                <div>\n                  <Button\n                    color=\"success\"\n                    size=\"sm\"\n                    className=\"mr-3\"\n                    onClick={this.acceptFriendRequest.bind(this, friend._id)}\n                  >\n                    Accept\n                  </Button>\n                  <Button\n                    color=\"danger\"\n                    size=\"sm\"\n                    className=\"mr-3\"\n                    onClick={this.rejectFriendRequest.bind(this, friend._id)}\n                  >\n                    Reject\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          );\n        }\n      });\n      return (\n        \n        <div className=\"App container\">\n          <h1>Users</h1>\n          <Modal\n            isOpen={this.state.newUserModal}\n            toggle={this.toggleNewUserModal.bind(this)}\n          >\n            <ModalHeader toggle={this.toggleNewUserModal.bind(this)}>\n              Add a new user\n            </ModalHeader>\n            <ModalBody>\n              <FormGroup>\n                <Label for=\"first_name\">First name</Label>\n                <Input\n                  id=\"first_name\"\n                  value={this.state.newUserData.name}\n                  onChange={(e) => {\n                    let { newUserData } = this.state;\n                    newUserData.name = e.target.value;\n                    this.setState({ newUserData });\n                  }}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"last_name\">Last name</Label>\n                <Input\n                  id=\"last_name\"\n                  value={this.state.newUserData.last_name}\n                  onChange={(e) => {\n                    let { newUserData } = this.state;\n                    newUserData.last_name = e.target.value;\n                    this.setState({ newUserData });\n                  }}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <Label for=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  value={this.state.newUserData.email}\n                  onChange={(e) => {\n                    let { newUserData } = this.state;\n                    newUserData.email = e.target.value;\n                    this.setState({ newUserData });\n                  }}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <Label for=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  value={this.state.newUserData.password}\n                  onChange={(e) => {\n                    let { newUserData } = this.state;\n                    newUserData.password = e.target.value;\n                    this.setState({ newUserData });\n                  }}\n                />\n              </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={this.addUser.bind(this)}>\n                Add user\n              </Button>{\" \"}\n              <Button\n                color=\"secondary\"\n                onClick={this.toggleNewUserModal.bind(this)}\n              >\n                Cancel\n              </Button>\n            </ModalFooter>\n          </Modal>\n\n          <Modal\n            isOpen={this.state.editUserModal}\n            toggle={this.toggleEditUserModal.bind(this)}\n          >\n            <ModalHeader toggle={this.toggleEditUserModal.bind(this)}>\n              Edit a new user\n            </ModalHeader>\n            <ModalBody>\n              <FormGroup>\n                <Label for=\"first_name\">First name</Label>\n                <Input\n                  id=\"first_name\"\n                  value={this.state.editUserData.first_name}\n                  onChange={(e) => {\n                    let { editUserData } = this.state;\n                    editUserData.first_name = e.target.value;\n                    this.setState({ editUserData });\n                  }}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"last_name\">Last name</Label>\n                <Input\n                  id=\"last_name\"\n                  value={this.state.editUserData.last_name}\n                  onChange={(e) => {\n                    let { editUserData } = this.state;\n                    editUserData.last_name = e.target.value;\n                    this.setState({ editUserData });\n                  }}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  value={this.state.editUserData.email}\n                  onChange={(e) => {\n                    let { editUserData } = this.state;\n                    editUserData.email = e.target.value;\n                    this.setState({ editUserData });\n                  }}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  value={this.state.editUserData.password}\n                  onChange={(e) => {\n                    let { editUserData } = this.state;\n                    editUserData.password = e.target.value;\n                    this.setState({ editUserData });\n                  }}\n                />\n              </FormGroup>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"primary\" onClick={this.updateUser.bind(this)}>\n                Update user\n              </Button>{\" \"}\n              <Button\n                color=\"secondary\"\n                onClick={this.toggleEditUserModal.bind(this)}\n              >\n                Cancel\n              </Button>\n            </ModalFooter>\n          </Modal>\n\n          <Table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Username</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>{users}</tbody>\n          </Table>\n          <h1>Outgoing request</h1>\n          <Table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Request</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>{friendsOutgoing}</tbody>\n          </Table>\n          <h1>Incoming request</h1>\n          <Table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>{friendsIncoming}</tbody>\n          </Table>\n          <h1>Friends</h1>\n          <Table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>{friends}</tbody>\n          </Table>\n        </div>\n      );\n    }\n  }\n}\n","D:\\Project\\social_network_ruslan\\src\\PrivateRoute.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"44","replacedBy":"48"},{"ruleId":"46","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":248,"column":56,"nodeType":"52","messageId":"53","endLine":248,"endColumn":58},{"ruleId":"50","severity":1,"message":"51","line":269,"column":64,"nodeType":"52","messageId":"53","endLine":269,"endColumn":66},{"ruleId":"50","severity":1,"message":"51","line":291,"column":64,"nodeType":"52","messageId":"53","endLine":291,"endColumn":66},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],["54"],["55"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]